import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes, ConversationHandler, \
    MessageHandler as MessageHandlerConv
import requests

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CONVERT_AMOUNT = range(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ httpx –∏ telegram –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Secrets
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not set in Secrets")
    raise ValueError("BOT_TOKEN not set")

def get_crypto_rate(crypto_symbol):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫ KZT —á–µ—Ä–µ–∑ CoinGecko API"""
    try:
        # –ú–∞–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –∫ ID CoinGecko
        crypto_ids = {
            'USDT': 'tether',
            'BTC': 'bitcoin', 
            'ETH': 'ethereum',
            'TON': 'the-open-network'
        }
        
        if crypto_symbol not in crypto_ids:
            return None
            
        crypto_id = crypto_ids[crypto_symbol]
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=kzt"
        
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if crypto_id in data and 'kzt' in data[crypto_id]:
            return float(data[crypto_id]['kzt'])
        else:
            raise KeyError(f"Rate not found for {crypto_symbol}")
            
    except (requests.exceptions.RequestException, KeyError, ValueError) as e:
        logger.error(f"CoinGecko API error for {crypto_symbol}: {e}")
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback —á–µ—Ä–µ–∑ USD –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        try:
            url_usd = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=usd"
            response_usd = requests.get(url_usd, timeout=10)
            response_usd.raise_for_status()
            data_usd = response_usd.json()
            if crypto_id in data_usd and 'usd' in data_usd[crypto_id]:
                usd_rate = float(data_usd[crypto_id]['usd'])
                url_kzt = "https://api.exchangerate-api.com/v4/latest/USD"
                response_kzt = requests.get(url_kzt, timeout=5)
                response_kzt.raise_for_status()
                data_kzt = response_kzt.json()
                if 'rates' in data_kzt and 'KZT' in data_kzt['rates']:
                    kzt_rate = float(data_kzt['rates']['KZT'])
                    return usd_rate * kzt_rate
                else:
                    raise KeyError("KZT rate not found in fallback API")
            else:
                raise KeyError(f"USD rate not found for {crypto_symbol}")
        except (requests.exceptions.RequestException, KeyError, ValueError) as fallback_e:
            logger.error(f"Fallback API error for {crypto_symbol}: {fallback_e}")
            return None

def get_usdt_kzt_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å USDT –∫ KZT"""
    return get_crypto_rate('USDT')

def get_all_rates():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å—ã –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫ KZT"""
    rates = {}
    for crypto in ['USDT', 'BTC', 'ETH', 'TON']:
        rate = get_crypto_rate(crypto)
        if rate:
            rates[crypto] = rate
    return rates

def get_reply_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π"""
    keyboard = [
        [KeyboardButton("USDT/KZT"), KeyboardButton("BTC/KZT")],
        [KeyboardButton("ETH/KZT"), KeyboardButton("TON/KZT")],
        [KeyboardButton("–í—Å–µ –∫—É—Ä—Å—ã"), KeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USDT")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫—É—Ä—Å—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    try:
        rates = get_all_rates()
        if rates:
            message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
            for crypto, rate in rates.items():
                message += f"1 {crypto} = {rate:.2f} KZT\n"
            logger.info("Start command processed with all rates")
        else:
            message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.warning("Start command processed but failed to fetch rates")
        
        await update.message.reply_text(
            message,
            reply_markup=get_reply_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")

async def convert_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É–º–º—É"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):",
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
    )
    return CONVERT_AMOUNT

async def convert_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    user_input = update.message.text
    if user_input == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_reply_keyboard()
        )
        return ConversationHandler.END

    try:
        amount = float(user_input)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        rate = get_crypto_rate('USDT')
        if rate:
            converted_amount = amount * rate
            response = f"{amount} USDT = {converted_amount:.2f} KZT (–ø–æ –∫—É—Ä—Å—É 1 USDT = {rate:.2f} KZT)"
            logger.info(f"Converted {amount} USDT to {converted_amount:.2f} KZT")
        else:
            response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.warning("Failed to fetch USDT rate for conversion")
        
        await update.message.reply_text(response, reply_markup=get_reply_keyboard())
        return ConversationHandler.END
    except ValueError as e:
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100). –û—à–∏–±–∫–∞: {e}",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return CONVERT_AMOUNT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_reply_keyboard()
    )
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message_text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        if message_text == "USDT/KZT":
            rate = get_crypto_rate('USDT')
            response = f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 USDT = {rate:.2f} KZT" if rate else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USDT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.info("USDT rate requested")
            
        elif message_text == "BTC/KZT":
            rate = get_crypto_rate('BTC')
            response = f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 BTC = {rate:.2f} KZT" if rate else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.info("BTC rate requested")
            
        elif message_text == "ETH/KZT":
            rate = get_crypto_rate('ETH')
            response = f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 ETH = {rate:.2f} KZT" if rate else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å ETH. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.info("ETH rate requested")
            
        elif message_text == "TON/KZT":
            rate = get_crypto_rate('TON')
            response = f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 TON = {rate:.2f} KZT" if rate else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å TON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.info("TON rate requested")
            
        elif message_text == "–í—Å–µ –∫—É—Ä—Å—ã":
            rates = get_all_rates()
            if rates:
                response = "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
                for crypto, rate in rates.items():
                    response += f"1 {crypto} = {rate:.2f} KZT\n"
                logger.info("All rates requested")
            else:
                response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                logger.warning("Failed to fetch all rates")
                
        elif message_text == "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USDT":
            return  # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ConversationHandler
        
        else:
            # –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            response = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USDT':"
            logger.info("ReplyKeyboard sent successfully")
        
        await update.message.reply_text(response, reply_markup=get_reply_keyboard())
        
    except Exception as e:
        logger.error(f"Error sending keyboard: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–æ–ª–ª–∏–Ω–≥–æ–º"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ConversationHandler –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^(–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USDT)$"), convert_start)],
            states={
                CONVERT_AMOUNT: [MessageHandlerConv(filters.TEXT & ~filters.COMMAND, convert_amount)]
            },
            fallbacks=[MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞)$"), cancel)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(conv_handler)
        
        logger.info("Bot starting with polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å drop_pending_updates=True –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"Bot failed to start: {e}")

if __name__ == '__main__':
    main()
